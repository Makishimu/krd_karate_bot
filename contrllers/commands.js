import {
    BOT_COMMANDS_TEXT,
    DIFFERENT_ACTIONS_BUTTONS,
    OTHER_TEXT_ANSWER,
    MASTERS_ARRAY,
    ALL_GYMS_LIST
} from '../config/consts.js';
import { Markup } from 'telegraf';
import { fmt, link, bold } from "telegraf/format";

const start = async ctx => {
    try {
        console.log('User started - ', ctx.message.from);
        await ctx.telegram.sendMessage(
            167986013,
            `–ë—ã–ª —Å—Ç–∞—Ä—Ç –æ—Ç –ø–æ–ª–æ–∑—å–≤–∞—Ç–µ–ª—è:
            id - ${ctx.message.from.id}
            –∏–º—è - ${ctx.message.from.first_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            —Ñ–∞–º–∏–ª–∏—è - ${ctx.message.from.last_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}
            –Ω–∏–∫ -  ${ctx.message.from.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`
        );
        await ctx.replyWithHTML(
            `–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Ä–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å ${ctx.message?.from?.first_name || '–≤ –Ω–∞—à–µ–º –±–æ—Ç–µ'}!\n\n` +
            '–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –∫–∏–æ–∫—É—à–∏–Ω–∫–∞–π –∫–∞—Ä–∞—Ç–µ –≤ –≥–æ—Ä–æ–¥–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ.\n\n' +
            '<b>–ù–∞—à —Å–µ–Ω—Å–µ–π</b> - ' +
            '–ö–∞–∑–∞—Ä—è–Ω –°–∞–º–≤–µ–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á, —á—ë—Ä–Ω—ã–π –ø–æ—è—Å, 4–π –¥–∞–Ω. –û–Ω –≤–æ—Å–ø–∏—Ç–∞–ª –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–º–ø–∏–æ–Ω–æ–≤' +
            ' –†–æ—Å–∏–∏, –ï–≤—Ä–æ–ø—ã, –ú–∏—Ä–∞. –ê —Ç–∞–∫ –∂–µ –º–æ–ª–æ–¥—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫ –∂–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Ç –≤ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏ –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É.\n\n' +
            '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤—Å—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n' +
            '<b>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –≤–æ—Å–ø–æ–ª—å–∑—É—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é:</b>' +
            BOT_COMMANDS_TEXT
            // '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∏–¥ —É—Å–ª—É–≥:</b>',
            // Markup.inlineKeyboard(PRICE_LIST.map(item => {
            //     return [Markup.button.callback(item.title, item.id)]
            // }))
        );

    } catch (error) {
        await console.log('`–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ /start –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ -', error);
        await ctx.reply(`–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ /start –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ - ${error.message}`)
    }

};
const help = async ctx => {
    await ctx.reply(BOT_COMMANDS_TEXT);
};

const gymsList =  async ctx => {
    try {
        await ALL_GYMS_LIST.forEach(
             (gym) => {
                ctx.replyWithHTML(
                    `<b>${gym.title}</b>\n—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ø–æ –Ω–∞–¥—Ä–µ—Å—É:\n` +
                    `<i>${gym.address}</i>\n\n` +
                    `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ:\n` +
                    `${gym.link}\n\n`
                );
            }
        );
        // await ctx.replyWithHTML(
        //     `${
        //         ALL_GYMS_LIST.map(
        //             gym => {
        //                 return (
        //                     `<b>${gym.title}</b>\n—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ø–æ –Ω–∞–¥—Ä–µ—Å—É:\n` +
        //                     `<i>${gym.address}</i>\n\n` +
        //                     `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ:\n` +
        //                     `${gym.link}\n\n`
        //                 );
        //             }
        //         ).join('')}`
        // );
    } catch (error) {
        console.log('ERROR inside gymsList - ', error.message);
    }

}

const createReplyFunction = (type) => {
    return async ctx => {
        try {
            await ctx.answerCbQuery();
            await ctx.replyWithPhoto(
                { source: FIRST_STEP_PICTURES_MAP[type]},
                { caption: fmt
                        `${bold`${PRICE_ANSWER_TITLE_LIST_MAP[type]}.`}
            \n${link(
                            'üîóüìã–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ, –Ω–∞–∂–∞–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Çüëà',
                            `${'https://google.com'}`
                        )}\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Å—Å—ã–ª–æ–∫, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π  /list
            `
                }
            );
        } catch (error) {
            console.error(`Error while ${type} processing - `, error.message);
        }
    }
};

// const appliances_repair_command = createReplyFunction('appliances_repair');
// const plumber_command = createReplyFunction('plumber');
// const finishing_works_command = createReplyFunction('finishing_works');
// const construction_command = createReplyFunction('construction');
const send_contacts_command = async (ctx, hideAddContacts) => {
    try {
        await ctx.replyWithHTML(
            `${
                MASTERS_ARRAY.map(
                    master => {
                        return (
                            `<b>${master.phoneName}</b>\n` + 
                            `<i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> <a href="tel:${master.phone}">${master.phone}</a>\n\n` +
                            `<i>–í–µ–¥—ë—Ç –∑–∞–Ω—è—Ç–∏—è –≤ –∑–∞–ª–∞—Ö:</i>\n${
                                master.gymsList.map(gym => { return `${gym.title} - ${gym.address}\n`}).join('')
                            }______________________\n\n`
                        )}
                ).join('')
            }`
        );
        if (!hideAddContacts) {
            await ctx.replyWithHTML('–î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫ —Å–µ–±–µ –≤ –∑–∞–ø–∏—Å–Ω—É—é –∫–Ω–∏–≥—É:',
                Markup.inlineKeyboard(
                    [Markup.button.callback(
                        '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã',
                        'btn_get_contacts'
                    )])
            );
        }
        // await ctx.replyWithHTML('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥:',
        //     Markup.inlineKeyboard([Markup.button.callback('–ù–∞–∑–∞–¥', 'btn_back')])
        // );
    } catch (error) {
        console.error('Error while send_contacts_command processing - ', error.message);
    }
};
const add_contacts_command = async ctx => {
    try {
        if (ctx && !ctx.message) {
            await ctx.answerCbQuery();
        }
        MASTERS_ARRAY.map(
            async master => {
                await ctx.replyWithContact(`${master.phone}`, `${master.phoneName}`);
            }
        );

    } catch (error) {
        await ctx.reply(
            '–í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –ø–µ—Ä–µ—Å—Ç–∞–ª –∏—Ö –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å' +
            ', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —É–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ :)'
        );
        await send_contacts_command(ctx, true);
        console.error('Error while add_contacts_command processing - ', error.message);
    }
};

const not_understand_command = async ctx => {
    try {
        await ctx.replyWithHTML(OTHER_TEXT_ANSWER);
    } catch (error) {
        console.error('Hearing Error - ', error.message);
    }
};

export {
    start,
    help,
    gymsList,
    send_contacts_command,
    add_contacts_command,
    not_understand_command
}